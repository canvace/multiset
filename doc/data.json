{
    "project": {
        "name": "MultiSet",
        "description": "The MultiSet collection class implements a simple multi-set, a set with possibly repeated elements.",
        "version": "1.0.0",
        "url": "https://github.com/canvace/broadcast"
    },
    "files": {
        "src\\MultiSet.js": {
            "name": "src\\MultiSet.js",
            "modules": {},
            "classes": {
                "MultiSet": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "MultiSet": {
            "name": "MultiSet",
            "shortname": "MultiSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\MultiSet.js",
            "line": 1,
            "description": "Implements a multi-set, a set with possibly repeated elements.\n\nThis container allows insertion and removal of elements in constant time\nassuming the implementation of the underlying JavaScript engine manages in\namortizing insertion and removal of properties in objects to constant time.\n\nThe arguments you specify to the `MultiSet` constructor are immediately\ninserted into the container. For example:\n\n\tvar MultiSet = require('multiset');\n\tvar ms = new MultiSet(1, 2, 3); // ms contains 1, 2 and 3\n\nThe previous snippet is equivalent to:\n\n\tvar ms = new MultiSet();\n\tms.add(1);\n\tms.add(2);\n\tms.add(3);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elements",
                    "description": "The elements to add initially to the `MultiSet`.",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src\\MultiSet.js",
            "line": 53,
            "description": "Inserts an element into the container in amortized constant time. The\nelement can be of any type (numbers, strings, objects, etc.) and can be\ninserted many times.\n\nThe `add` function returns a function that removes the element. The\nreturned function is idempotent: it does not have any effect when called\nagain after the first time.\n\nExample:\n\n\tvar ms = new MultiSet(1, 2);\n\tvar remove = ms.add(3); // ms now contains three elements: 1, 2 and 3\n\tremove(); // ms now contains two elements: 1 and 2\n\tremove(); // no effect, ms still contains 1 and 2\n\nThe returned function returns a boolean value indicating whether the\nelement was present and could be removed or not. `false` indicates the\nelement was not present because it had already been removed by a previous\ncall.\n\nExample:\n\n\tvar ms = new MultiSet();\n\tvar remove = ms.add(3);\n\tif (remove()) {\n\t\talert('removed!');\n\t}\n\tif (remove()) {\n\t\talert('this is never alerted');\n\t}",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "element",
                    "description": "The element to be inserted in the `MultiSet`.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "A function that removes the inserted element.",
                "type": "Function"
            },
            "class": "MultiSet"
        },
        {
            "file": "src\\MultiSet.js",
            "line": 91,
            "description": "Iterates over the container and calls the specified function `action` for\neach iterated element.\n\nThe `action` function receives two arguments: the element and a function\nthat removes it if called. The removing function stays valid forever,\neven after the whole `forEach` call is over, and is idempotent: it does\nnot have any effects after it is called once.\n\nThe following example inserts some numbers into the container and then\nremoves only the numbers equal to 3:\n\n\tvar ms = new MultiSet(1, 3, 7, 6, 3, 4, 3, 3, 5);\n\tms.forEach(function (element, remove) {\n\t\tif (element === 3) {\n\t\t\tremove();\n\t\t}\n\t});\n\t// ms now contains 1, 7, 6, 4, 5\n\nElements with repetitions are iterated as many times as they are\nrepeated. For example, in the previous snippet the number 3 is iterated\n(and removed) four times.\n\nNote that the order of iteration is undefined as it depends on the order\nof iteration over object properties implemented by the underlying\nJavaScript engine. This is typically the insertion order, which means\n`MultiSet.forEach` enumerates the elements in the same order they are\ninserted by `MultiSet.add`, but you must not depend on that assumption.\n\nThe iteration is interrupted if the `action` function returns `false`.\nThe following example adds some numbers to the container, then iterates\nover it and interrupts when it encounters the number 3:\n\n\tvar ms = new MultiSet(1, 2, 3, 4);\n\tms.forEach(function (element) {\n\t\tif (element === 3) {\n\t\t\treturn false;\n\t\t}\n\t});\n\nThe number 4 is not enumerated.\n\n`MultiSet.forEach` returns `false` if the iteration completed and `true`\nif it was interrupted, which is suitable for implementing finding\nalgorithms.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "action",
                    "description": "The callback function that gets called for each\nelement of the multiset. It receives the current element and a callback\nfunction suitable for deleting it from the `MultiSet`.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "`true` if `action` returned `false`, `false` if it did\nnot and all the elements were enumerated.",
                "type": "Boolean"
            },
            "class": "MultiSet"
        },
        {
            "file": "src\\MultiSet.js",
            "line": 166,
            "description": "Iterates over the container and calls the specified function `action` for\neach iterated element.\n\nThe `action` function receives one argument, the current element. Any\nreturn value is ignored.\n\nThis method is similar to the `forEach` method except it can be faster on\nsome browsers because it does not generate a closure (the element's\nremoval function) at each iterated element and does not analyze the\nreturn value of the callback function. Infact, the iterated elements\ncannot be removed and the iteration cannot be interrupted.\n\nYou usually use the `forEach` method, but you may also use `fastForEach`\nif your callback function does not use its second argument (the removal\nfunction) and never returns `false`.\n\nNote that the order of iteration is undefined as it depends on the order\nof iteration over object properties implemented by the underlying\nJavaScript engine. This is typically the insertion order, which means\n`MultiSet.fastForEach` enumerates the elements in the same order they are\ninserted by `MultiSet.add`, but you must not depend on that assumption.",
            "itemtype": "method",
            "name": "fastForEach",
            "params": [
                {
                    "name": "action",
                    "description": "The callback function that gets called for each\nelement of the multiset. It receives the current element as an argument.\nThe return value is ignored.",
                    "type": "Function"
                }
            ],
            "class": "MultiSet"
        },
        {
            "file": "src\\MultiSet.js",
            "line": 202,
            "description": "Returns the number of elements currently contained.\n\nIf an element is inserted more than once, it counts as many times as it\nis inserted.\n\nThis method operates in constant time.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of contained elements.",
                "type": "Number"
            },
            "example": [
                "\n\tvar ms = new MultiSet(1, 2, 2, 3, 3);\n\talert(ms.count()); // alerts 5"
            ],
            "class": "MultiSet"
        },
        {
            "file": "src\\MultiSet.js",
            "line": 220,
            "description": "Indicates whether the container is empty or not.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "`true` if the container is empty, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "MultiSet"
        },
        {
            "file": "src\\MultiSet.js",
            "line": 230,
            "description": "Empties the container: every element is removed and the count is reset to\nzero.\n\nThis method operates in constant time.",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n\tvar ms = new MultiSet(1, 2, 3, 4, 5);\n\tms.clear();\n\talert(ms.count()); // alerts 0"
            ],
            "class": "MultiSet"
        }
    ],
    "warnings": []
}